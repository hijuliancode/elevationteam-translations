#!/usr/bin/env node
import t from"fs";import n from"path";import e from"readline";import{OpenAI as o}from"openai";import s from"dotenv";const a=e.createInterface({input:process.stdin,output:process.stdout});function r(t){return new Promise((n=>a.question(t,n)))}s.config();const i=process.env.OPENAI_API_KEY,c=process.env.OPENAI_ORGANIZATION;i||(console.error("Error: OPENAI_API_KEY is required to use the OpenAI API"),process.exit(1));const l=new class{opeanai;constructor(t,n){this.opeanai=new o({apiKey:t,organization:n})}async translate(t,n){try{const e=await this.opeanai.chat.completions.create({model:"gpt-3.5-turbo",messages:[{role:"system",content:"You are a helpful assistant that translates text."},{role:"user",content:`Translate the following text to ${n}: "${t}"`}]});return e.choices[0]?.message?.content?.trim()||""}catch(t){return console.error("Error translating text",t),""}}}(i,c);const[,,p]=process.argv;if("init"===p)!async function(){console.log("Welcome to the Elevation Team Translation CLI!");let e=await r("Enter the base locale (e.g., en) [default: en]: ")||"en",o=await r("Enter the input directory for translation files (e.g., src/translations) [default: src/translations]: ")||"src/translations",s=await r("Enter the output directory for generated translation files (e.g., src/translations) [default: src/translations]: ")||"src/translations",a=await r("Enter the output format (e.g., json, js) [default: json]: ")||"json";const i=(await r("Enter target locales separated by space or comma (e.g., fr, es, de): ")).split(/[\s,]+/).filter((t=>t)),c=n.join(process.cwd(),"translation.config.ts");if(t.existsSync(c))return void console.log("Config file already exists at translation.config.ts");const l=await r("¿Qué proveedor de IA desea usar para las traducciones? (openai): "),p=`\nexport const translationConfig = {\n  baseLocale: '${e}', // Base language for translations\n  languages: ['${e}', ${i.map((t=>`'${t}'`)).join(", ")}], // Target languages for translations\n  inputDir: '${o}', // Directory for the base translation files\n  outputDir: '${s}', // Directory for the generated translation files\n  format: '${a}', // Output format (e.g., json, js)\n  aiProvider: '${l}', // AI provider for translations\n};\n\n`;t.writeFileSync(c,p),console.log("Config file created successfully at translation.config.ts");const f=n.join(process.cwd(),"package.json");if(!t.existsSync(f))return void console.error("Error: package.json not found. Please ensure you are in a Node.js project.");const u=JSON.parse(t.readFileSync(f,"utf-8"));u.scripts=u.scripts||{},u.scripts["translation:watch"]?console.log('Script "translation:watch" already exists in package.json'):(u.scripts["translation:watch"]="@elevationteam/translations watch",console.log('Script "translation:watch" added to package.json')),u.scripts["translation:run"]?console.log('Script "translation:run" already exists in package.json'):(u.scripts["translation:run"]="@elevationteam/translations run",console.log('Script "translation:run" added to package.json')),t.writeFileSync(f,JSON.stringify(u,null,2))}();else if("watch"===p){!async function(e){const{baseLocale:o,locales:s,inputDir:a,outputDir:r,format:i}=e,c=n.join(process.cwd(),a,`${o}.${i}`);t.existsSync(c)?(t.watch(c,(async e=>{if("change"===e){console.log(`Changes detected in ${c}`);try{const e=JSON.parse(t.readFileSync(c,"utf-8"));for(const a of s){if(a===o)continue;const s=n.join(process.cwd(),r,`${a}.${i}`);let c={};t.existsSync(s)&&(c=JSON.parse(t.readFileSync(s,"utf-8")));const p={...c};for(const[t,n]of Object.entries(e))c[t]&&c[t]===n||(p[t]=await l.translate(n,a));t.writeFileSync(s,JSON.stringify(p,null,2)),console.log(`Translation updated for ${a} at ${s}`)}}catch(t){console.error(`Error processing translations: ${t.message}`)}}})),console.log(`Watching for changes in ${c}`)):console.error(`Base file not found: ${c}`)}(require(process.cwd()+"/translations.config.js").translationConfig)}else console.log('Unknown command. Use "init" or "watch".');
