#!/usr/bin/env node
import t from"fs";import n from"path";import e from"readline";import{OpenAI as o}from"openai";import a from"dotenv";const s=e.createInterface({input:process.stdin,output:process.stdout});function r(t){return new Promise((n=>s.question(t,n)))}a.config();const i=new o({organization:"org-1e3b1b1b-1e3b-1e3b-1e3b-1e3b1e3b1e3b",apiKey:process.env.OPENAI_API_KEY,project:"proj-1e3b1b1b-1e3b-1e3b-1e3b-1e3b1e3b1e3b"});async function c(t,n){try{const e=await i.chat.completions.create({model:"gpt-3.5-turbo",messages:[{role:"system",content:"You are a helpful assistant that translates text."},{role:"user",content:`Translate the following text to ${n}: "${t}"`}],temperature:.5});return e.choices[0]?.message?.content?.trim()||""}catch(t){return console.error("Error translating text",t),""}}const[,,l]=process.argv;if("init"===l)!async function(){console.log("Welcome to the Elevation Team Translation CLI!");let e=await r("Enter the base locale (e.g., en) [default: en]: ")||"en",o=await r("Enter the input directory for translation files (e.g., src/translations) [default: src/translations]: ")||"src/translations",a=await r("Enter the output directory for generated translation files (e.g., src/translations) [default: src/translations]: ")||"src/translations",s=await r("Enter the output format (e.g., json, js) [default: json]: ")||"json",i=[],c=!0;for(;c;){const t=await r("Enter a target locale (e.g., fr): ");i.push(t),c="y"===await r("Add another target locale? (y/n): ")}const l=n.join(process.cwd(),"translation.config.ts");if(t.existsSync(l))return void console.log("Config file already exists at translation.config.ts");const f=await r("¿Qué proveedor de IA desea usar para las traducciones? (openai): "),p=`\nexport const translationConfig = {\n  baseLocale: ${e}, // Base language for translations\n  languages: ['${e}', ${i.map((t=>`'${t}'`)).join(", ")}], // Target languages for translations\n  inputDir: '${o}', // Directory for the base translation files\n  outputDir: '${a}', // Directory for the generated translation files\n  format: '${s}', // Output format (e.g., json, js)\n  aiProvider: '${f}', // AI provider for translations\n};\n\n`;t.writeFileSync(l,p),console.log("Config file created successfully at translation.config.ts");const u=n.join(process.cwd(),"package.json");if(!t.existsSync(u))return void console.error("Error: package.json not found. Please ensure you are in a Node.js project.");const g=JSON.parse(t.readFileSync(u,"utf-8"));g.scripts=g.scripts||{},g.scripts["translation:watch"]?console.log('Script "translation:watch" already exists in package.json'):(g.scripts["translation:watch"]="elevationteam-translation watch",console.log('Script "translation:watch" added to package.json')),g.scripts["translation:run"]?console.log('Script "translation:run" already exists in package.json'):(g.scripts["translation:run"]="elevationteam-translation run",console.log('Script "translation:run" added to package.json')),t.writeFileSync(u,JSON.stringify(g,null,2))}();else if("watch"===l){!async function(e){const{baseLocale:o,locales:a,inputDir:s,outputDir:r,format:i}=e,l=n.join(process.cwd(),s,`${o}.${i}`);t.existsSync(l)?(t.watch(l,(async e=>{if("change"===e){console.log(`Changes detected in ${l}`);try{const e=JSON.parse(t.readFileSync(l,"utf-8"));for(const s of a){if(s===o)continue;const a=n.join(process.cwd(),r,`${s}.${i}`);let l={};t.existsSync(a)&&(l=JSON.parse(t.readFileSync(a,"utf-8")));const f={...l};for(const[t,n]of Object.entries(e))l[t]&&l[t]===n||(f[t]=await c(n,s));t.writeFileSync(a,JSON.stringify(f,null,2)),console.log(`Translation updated for ${s} at ${a}`)}}catch(t){console.error(`Error processing translations: ${t.message}`)}}})),console.log(`Watching for changes in ${l}`)):console.error(`Base file not found: ${l}`)}(require(process.cwd()+"/translations.config.js").translationConfig)}else console.log('Unknown command. Use "init" or "watch".');
