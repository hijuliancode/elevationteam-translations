#!/usr/bin/env node
import o from"fs";import n from"path";import e from"readline";import{OpenAI as t}from"openai";import s from"chokidar";const a=new t({apiKey:process.env.OPENAI_API_KEY});async function r(o,n,e){const t={...n};for(const[s,a]of Object.entries(o))if("string"!=typeof a||n[s]&&n[s]===a)"object"==typeof a&&(t[s]=await r(a,n[s],e));else try{const o=await i(a,e);t[s]=o}catch(o){console.error(`Error translating key: ${s} to ${e}: ${o.message}`)}return t}async function i(o,n){const e=await a.chat.completions.create({model:"gpt-3.5-turbo-0125",messages:[{role:"system",content:`You are a professional translator. Translate the following text to ${n}:`},{role:"user",content:o}],temperature:.3,max_tokens:100});return console.log("---"),console.log("response",e),console.log("---"),console.log("response.choices",e.choices),console.log("---"),console.log("response.choices[0]",e.choices[0]),console.log("---"),console.log("response.choices[0]?.message",e.choices[0]?.message),console.log("---"),e.choices[0]?.message?.content?.trim()||o}const c=n.join(process.cwd(),"translation.config.js");async function l(){try{return o.existsSync(c)||(console.log("Error: translation.config.js not found."),process.exit(1)),(await import(c)).translationConfig}catch(o){console.error("Error loading configuration: ",o.message),process.exit(1)}}async function g(e){const{defaultLanguage:t,targetLanguages:s,inputDir:a,outputDir:i,format:c,aiProvider:l}=e,g=n.join(process.cwd(),a,`${t}.${c}`);o.existsSync(g)||(console.error(`Error: Base translation file not found at ${g}`),process.exit(1));try{const e=JSON.parse(o.readFileSync(g,"utf-8"));for(const a of s){if(a===t)continue;const s=n.join(process.cwd(),i,`${a}.${c}`);let l={};o.existsSync(s)&&(l=JSON.parse(o.readFileSync(s,"utf-8")));await r(e,l,a)}}catch(o){console.error("Error processing translations: ",o.message),process.exit(1)}}const u=e.createInterface({input:process.stdin,output:process.stdout});function f(o){return new Promise((n=>u.question(o,n)))}const[,,p]=process.argv;"init"===p?async function(){console.log("Welcome to the Elevation Team Translation CLI!");let e=await f("Enter the base language (en): ")||"en";const t=(await f("Enter target locales separated by space or comma (es): ")||"es").split(/[\s,]+/).filter((o=>o));if(t.includes(e))return console.log("Warning: The base language is included in the target languages. Removing it from the target languages..."),void t.splice(t.indexOf(e),1);if(1===t.length&&t[0]===e)return void console.log("Warning: The target language is the same as the base language. Please select a different target language.");let s=await f("Enter the input directory when the baseFile is located (src/translations): ")||"src/translations",a=await f("Enter the output directory for generated translation files (src/translations): ")||"src/translations",r=await f("Enter the output format js or json (json): ")||"json";if(o.existsSync(c))return void console.log("Config file already exists at translation.config.js");const i=`\nexport const translationConfig = {\n  defaultLanguage: '${e}', // Base language for translations\n  languages: ['${e}', ${t.map((o=>`'${o}'`)).join(", ")}], // Target languages for translations\n  inputDir: '${s}', // Directory for the base translation files\n  outputDir: '${a}', // Directory for the generated translation files\n  format: '${r}', // Output format (e.g., json, js)\n  aiProvider: 'openai', // AI provider for translations\n}\n\n`;o.writeFileSync(c,i),console.log("Config file created successfully at translation.config.js");const l=n.join(process.cwd(),"package.json");if(!o.existsSync(l))return void console.error("Error: package.json not found. Please ensure you are in a Node.js project.");const g=JSON.parse(o.readFileSync(l,"utf-8"));g.scripts=g.scripts||{},g.scripts["translation:run"]?console.log('Script "translation:run" already exists in package.json'):(g.scripts["translation:run"]="et-translations run",console.log('Script "translation:run" added to package.json')),g.scripts["translation:watch"]?console.log('Script "translation:watch" already exists in package.json'):(g.scripts["translation:watch"]="et-translations watch",console.log('Script "translation:watch" added to package.json')),o.writeFileSync(l,JSON.stringify(g,null,2)),u.close()}():"run"===p?l().then((o=>async function(o){await g(o)}(o))):"watch"===p?l().then((e=>async function(e){const{defaultLanguage:t,inputDir:a,format:r}=e,i=n.join(process.cwd(),a,`${t}.${r}`);o.existsSync(i)||(console.error(`Error: Base translation file not found at ${i}`),process.exit(1)),s.watch(i).on("change",(async()=>{console.log("Translation file changed. Processing translations...");try{await g(e),console.log("Translations processed successfully.")}catch(o){console.error("Error processing translations: ",o.message)}console.log(`Watching for changes in ${i}`)}))}(e))):(console.log('Unknown command. Use "init", "run", or "watch".'),process.exit(1));
